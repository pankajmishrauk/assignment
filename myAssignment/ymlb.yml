AWSTemplateFormatVersion: 2010-09-09
Resources:
  myLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: arn:aws:iam::990702915730:role/mylambdarole1
      Code:
        ZipFile: !Sub |        
            var AWS = require('aws-sdk');
            var ssm = new AWS.SSM();
            var s3 = new AWS.S3();
            var sqs = new AWS.SQS();
            var response = require('cfn-response');
            var responseData = {};
            exports.handler = function(event, context) {
            var params = {
            QueueName: "MyQueue"
            };
            var deleteParams = {
            QueueUrl: 'arn:aws:sqs:us-east-1:990702915730:myfirstque'
            };
            if (event.RequestType == 'Delete') {
            sqs.deleteQueue(deleteParams, function(err, data) {
            if (err) {
                console.log(err);
            }
            else {
                console.log(data);
            }
            });
            response.send(event, context, response.SUCCESS);
            return;
            }

            sqs.createQueue(params, function(err, data) {
            if (err) {
            responseData = { 'status': 'Error' };

            response.send(event, context, response.FAILED, responseData);

            }
            else {
            responseData = { 'status': 'Success' };

            response.send(event, context, response.SUCCESS, responseData);
            
            console.log(`incoming event ${JSON.stringify(event)}`);

            switch (event.RequestType) {
                case 'Create':  case 'Update':
                try {
                    var params = {
                        Name: event.ResourceProperties.parameterName,
                    };
                    let ssmResponse = await ssm.getParameter(params).promise();
                    console.log(`response ${JSON.stringify(ssmResponse)} from paramaterStore`);

                    # Write to S3 bucket 
                    var params = {
                        Bucket: process.env.BUCKET_NAME,
                        Key: `${event.RequestId}.txt`,
                        Body: `${ssmResponse.Parameter.Name} = ${ssmResponse.Parameter.Value}`,
                        ContentType: 'text/plain',
                    };

                    let s3Response = await s3.upload(params).promise();
                    console.log(s3Response)
                    return { "message": "create/update event sucessful" }
                }
                catch (error) {
                    return { "message": "create event failed", }
                }

            case 'Delete':
                return { "message": "delete event sucessful" }
            }

            }
            });


            }

      Runtime: nodejs12.x
  mycustom: 
   Type: Custom::myCustom
   Properties:
    ServiceToken: !GetAtt myLambda.Arn
Outputs:
   Results:
    Description: Create SQS Result
    Value: !GetAtt mycustom.status